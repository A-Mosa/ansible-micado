tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/v0.x.2/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  node_templates:
    nfs-server-pod:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
         clusterIP: 10.96.0.240
         ports:
           - target: 2049
           - target: 111
             protocol: udp
      artifacts:
       image:
         type: tosca.artifacts.Deployment.Image.Container.Docker
         file: itsthenetwork/nfs-server-ubuntu
         repository: docker_hub
      interfaces:
        Kubernetes:
          create:
            implementation: Deployment
            inputs:
              name: nfs-server-container
              metadata:
                labels:
                  app: wordpress
                  tier: nfs
              securityContext:
                privileged: True
              args: ['/exports']
              strategy:
                type: Recreate

    wordpress-mysql:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
         clusterIP: None
         ports:
           - target: 3306
      artifacts:
       image:
         type: tosca.artifacts.Deployment.Image.Container.Docker
         file: mysql:5.6
         repository: docker_hub
      requirements:
        - volume:
            node: nfs-volume
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: /var/lib/mysql
      interfaces:
        Kubernetes:
          create:
            implementation: Deployment
            inputs:
              name: mysql
              env:
              - name: MYSQL_ROOT_PASSWORD
                value: admin
              - name: MYSQL_DATABASE
                value: wordpress
              metadata:
                labels:
                  app: wordpress
                  tier: mysql
              ports:
              - containerPort: 3306
                name: mysql
              strategy:
                type: Recreate

    nfs-volume:
      type: tosca.nodes.MiCADO.Container.Volume
      properties:
        name: nfs-volume
      interfaces:
        Kubernetes:
          create:
            inputs:
              nfs:
                server: 10.96.0.240
                path: /

    wordpress:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
         ports:
           - target: 80
             nodePort: 30010
             type: NodePort
      artifacts:
       image:
         type: tosca.artifacts.Deployment.Image.Container.Docker
         file: wordpress:5.0.3-apache
         repository: docker_hub
      requirements:
        - volume:
            node: nfs-volume
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: /var/www/html
      interfaces:
        Kubernetes:
          create:
            implementation: Deployment
            inputs:
              name: wordpress
              env:
              - name: MYSQL_DB_HOST
                value: wordpress-mysql
              - name: MYSQL_DB_PASSWORD
                value: admin
              metadata:
                labels:
                  app: wordpress
                  tier: frontend
              ports:
              - containerPort: 80
                name: wordpress
              strategy:
                type: Recreate
              resources:
                requests:
                  cpu: "450m"

    worker_node:
      type: tosca.nodes.MiCADO.CloudSigma.Compute
      properties:
        num_cpus: 2000
        mem_size: 2147483648
        vnc_password: secret
        libdrive_id: ADD_YOUR_LIBRARY_DRIVE_ID_HERE (e.g. 837e9690-d1ae-4ad7-a7fb-895fabe88ec5)
        public_key_id: ADD_YOUR_PUBLIC_KEY_ID_HERE (e.g. d7c0f1ee-40df-4029-8d95-ec35b34dae1e)
        firewall_policy: ADD_YOUR_FIREWALL_POLICY_ID_HERE (e.g. fd97e326-83c8-44d8-90f7-0a19110f3c9d)
      interfaces:
        Occopus:
          create:
            inputs:
              interface_cloud: cloudsigma
              endpoint_cloud: ADD_YOUR_ENDPOINT (e.g. https://zrh.cloudsigma.com/api/2.0)
      capabilities:
        host:
          properties:
            num_cpus: 2
            mem_size: 2 GB

  outputs:
    ports:
      value: { get_attribute: [ wordpress, port ]}

  policies:
    - scalability:
        type: tosca.policies.Scaling.MiCADO.VirtualMachine.CPU.wordpress
        targets: [ worker_node ]
        properties:
          constants:
            NODE_TH_MAX: '20'
            NODE_TH_MIN: '5'
            SERVICE_NAME: 'wordpress'
          min_instances: 1
          max_instances: 6
    - scalability:
        type: tosca.policies.Scaling.MiCADO.Container.CPU.wordpress
        targets: [ wordpress ]
        properties:
          constants:
            SERVICE_NAME: 'wordpress'
            SERVICE_FULL_NAME: 'wordpress'
            SERVICE_TH_MAX: '20'
            SERVICE_TH_MIN: '5'
          min_instances: 1
          max_instances: 3

policy_types:
  tosca.policies.Scaling.MiCADO.Container.CPU.wordpress:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for container CPU
        default:
        - alert: service_overloaded
          expr: 'avg(rate(container_network_receive_bytes_total{container_label_io_kubernetes_container_name="{{SERVICE_FULL_NAME}}"}[30s]))/1000 > {{SERVICE_TH_MAX}}'
          for: 30s
        - alert: service_underloaded
          expr: 'avg(rate(container_network_receive_bytes_total{container_label_io_kubernetes_container_name="{{SERVICE_FULL_NAME}}"}[30s]))/1000 < {{SERVICE_TH_MIN}}'
          for: 30s
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for container CPU
        default: |
          if len(m_nodes) == m_node_count:
            if service_overloaded and m_node_count > m_container_count-1:
              m_container_count+=1
            if service_underloaded:
              m_container_count-=1
          else:
            print('Transient phase, skipping update of containers...')
        required: true

  tosca.policies.Scaling.MiCADO.VirtualMachine.CPU.wordpress:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      queries:
        type: list
        description: pre-define alerts for VM CPU
        default:
          CONTAINERS: 'count(container_last_seen{container_label_io_kubernetes_container_name="{{CONTAINER}}"})'
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for VM CPU
        default: |
          if m_time_since_node_count_changed > 60:
            if CONTAINERS/2 == len(m_nodes):
              m_node_count+=1
            if CONTAINERS <= len(m_nodes):
              m_node_count-=1
          else:
            print('Transient phase, skipping update of nodes...')
        required: true
