stack: stressng
data:
  constants:
    NODE_TH_MAX: '60'
    NODE_TH_MIN: '20'
    SERVICE_NAME: 'stressng'
    SERVICE_FULL_NAME: 'stressng_stressng'
    SERVICE_TH_MAX: '60'
    SERVICE_TH_MIN: '20'
  alerts:
    - alert: node_overloaded
      expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100)) > {{NODE_TH_MAX}}'
      for: 1m
    - alert: node_underloaded
      expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100)) < {{NODE_TH_MIN}}'
      for: 1m
    - alert: service_overloaded
      expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_com_docker_swarm_service_name="{{SERVICE_FULL_NAME}}"}[30s]))*100 > {{SERVICE_TH_MAX}}'
      for: 30s
    - alert: service_underloaded
      expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_com_docker_swarm_service_name="{{SERVICE_FULL_NAME}}"}[30s]))*100 < {{SERVICE_TH_MIN}}'
      for: 30s
scaling:
  nodes:
    stage: unused
    priority: unused
    min_instances: 1
    max_instances: 3
    scaling_rule: |
      if len(m_nodes) <= m_node_count and m_time_since_node_count_changed > 60:
        if node_overloaded:
          m_node_count+=1
        if node_underloaded:
          m_node_count-=1
      else:
        print('Transient phase, skipping update of nodes...')
  services:
    - name: "{{SERVICE_NAME}}"
      stage: unused
      priority: unused
      min_instances: 1
      max_instances: 3
      scaling_rule: | 
        if len(m_nodes) == m_node_count:
          if service_overloaded and m_node_count > m_container_count:
            m_container_count+=1
          if service_underloaded:
            m_container_count-=1
        else:
          print('Transient phase, skipping update of containers...')
          
        
