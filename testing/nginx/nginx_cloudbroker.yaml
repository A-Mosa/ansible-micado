tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/v0.6.0/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  node_templates:
    nginxapp:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
         ports:
           - "80:80"
         deploy:
           resources:
             reservations:
               cpus: '0.4'
         labels:
           kompose.service.type: 'nodeport'
      artifacts:
       image:
         type: tosca.artifacts.Deployment.Image.Container.Docker
         file: jaydes/nginxapp
         repository: docker_hub

    nginx-exporter:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
         ports:
           - "9113:9113"
         command: -nginx.scrape-uri http://nginxapp:80/nginx_status
      artifacts:
       image:
         type: tosca.artifacts.Deployment.Image.Container.Docker
         file: nginx/nginx-prometheus-exporter:0.2.0
         repository: docker_hub

    worker_node:
      type: tosca.nodes.MiCADO.Occopus.CloudBroker.Compute
      properties:
        cloud:
          interface_cloud: cloudbroker
          endpoint_cloud: ADD_YOUR_ENDPOINT (e.g https://cola-prototype.cloudbroker.com )
      capabilities:
        host:
          properties:
            deployment_id: ADD_YOUR_ID_HERE (e.g. e7491688-599d-4344-95ef-aff79a60890e)
            instance_type_id: ADD_YOUR_ID_HERE (e.g. 9b2028be-9287-4bf6-bbfe-bcbc92f065c0)
            key_pair_id: ADD_YOUR_ID_HERE (e.g. d865f75f-d32b-4444-9fbb-3332bcedeb75)
            opened_port: ADD_YOUR_PORTS_HERE (e.g. '22,2377,7946,8300,8301,8302,8500,8600,9100,9200,4789')

  outputs:
    ip:
      value: { get_attribute: [ nginxapp, ip_address ]}

  policies:
    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ worker_node ]
        properties:
          sources:
          - 'nginx-exporter:9113'
          constants:
            MAXNODES: 2
            MAXCONTAINERS: 4
          queries:
            REQUESTS: 'rate(nginx_http_requests_total[3m])'
          min_instances: 1
          max_instances: '{{MAXNODES}}'
          scaling_rule: |
            reqnodes=0
            REQUESTS = ceil(REQUESTS*60/6)
            if REQUESTS>0:
              reqconts = min(REQUESTS, MAXCONTAINERS)
              reqnodes = reqconts/2
              if reqnodes<m_node_count:
                m_node_count-=1
              if reqnodes>m_node_count:
                m_node_count+=1
            else:
              m_node_count = 0
            print "Number of required nodes:",reqnodes
            print "Number of requested nodes:",m_node_count

    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ nginxapp ]
        properties:
          min_instances: 1
          max_instances: '{{MAXCONTAINERS}}'
          scaling_rule: |
            print "Number of requests per minute:",REQUESTS*60
            required_count = 0
            REQUESTS = ceil(REQUESTS*60/8)
            if REQUESTS>0:
              required_count = min(REQUESTS, MAXCONTAINERS)
              m_container_count = min(required_count, len(m_nodes) * 2)
            else:
              m_container_count = 0
            print "Number of required containers:",required_count
            print "Number of requested containers:",m_container_count
